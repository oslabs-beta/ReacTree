System.register([],function(b){"use strict";return{execute:function(){b("createJSONStorage",E);const j=b("redux",(u,l)=>(a,s,o)=>(o.dispatch=e=>(a(v=>u(v,e),!1,e),e),o.dispatchFromDevtools=!0,{dispatch:(...e)=>o.dispatch(...e),...l})),I=new Map,w=u=>{const l=I.get(u);return l?Object.fromEntries(Object.entries(l.stores).map(([a,s])=>[a,s.getState()])):{}},T=(u,l,a)=>{if(u===void 0)return{type:"untracked",connection:l.connect(a)};const s=I.get(a.name);if(s)return{type:"tracked",store:u,...s};const o={connection:l.connect(a),stores:{}};return I.set(a.name,o),{type:"tracked",store:u,...o}},P=b("devtools",(u,l={})=>(a,s,o)=>{const{enabled:e,anonymousActionType:v,store:d,...h}=l;let m;try{m=(e!=null?e:!1)&&window.__REDUX_DEVTOOLS_EXTENSION__}catch{}if(!m)return u(a,s,o);const{connection:i,...p}=T(d,m,h);let f=!0;o.setState=(r,n,t)=>{const c=a(r,n);if(!f)return c;const S=t===void 0?{type:v||"anonymous"}:typeof t=="string"?{type:t}:t;return d===void 0?(i==null||i.send(S,s()),c):(i==null||i.send({...S,type:`${d}/${S.type}`},{...w(h.name),[d]:o.getState()}),c)};const g=(...r)=>{const n=f;f=!1,a(...r),f=n},y=u(o.setState,s,o);if(p.type==="untracked"?i==null||i.init(y):(p.stores[p.store]=o,i==null||i.init(Object.fromEntries(Object.entries(p.stores).map(([r,n])=>[r,r===p.store?y:n.getState()])))),o.dispatchFromDevtools&&typeof o.dispatch=="function"){const r=o.dispatch;o.dispatch=(...n)=>{r(...n)}}return i.subscribe(r=>{var n;switch(r.type){case"ACTION":if(typeof r.payload!="string"){console.error("[zustand devtools middleware] Unsupported action format");return}return _(r.payload,t=>{if(t.type==="__setState"){if(d===void 0){g(t.state);return}Object.keys(t.state).length!==1&&console.error(`
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `);const c=t.state[d];if(c==null)return;JSON.stringify(o.getState())!==JSON.stringify(c)&&g(c);return}o.dispatchFromDevtools&&typeof o.dispatch=="function"&&o.dispatch(t)});case"DISPATCH":switch(r.payload.type){case"RESET":return g(y),d===void 0?i==null?void 0:i.init(o.getState()):i==null?void 0:i.init(w(h.name));case"COMMIT":if(d===void 0){i==null||i.init(o.getState());return}return i==null?void 0:i.init(w(h.name));case"ROLLBACK":return _(r.state,t=>{if(d===void 0){g(t),i==null||i.init(o.getState());return}g(t[d]),i==null||i.init(w(h.name))});case"JUMP_TO_STATE":case"JUMP_TO_ACTION":return _(r.state,t=>{if(d===void 0){g(t);return}JSON.stringify(o.getState())!==JSON.stringify(t[d])&&g(t[d])});case"IMPORT_STATE":{const{nextLiftedState:t}=r.payload,c=(n=t.computedStates.slice(-1)[0])==null?void 0:n.state;if(!c)return;g(d===void 0?c:c[d]),i==null||i.send(null,t);return}case"PAUSE_RECORDING":return f=!f}return}}),y}),_=(u,l)=>{let a;try{a=JSON.parse(u)}catch(s){console.error("[zustand devtools middleware] Could not parse the received json",s)}a!==void 0&&l(a)},U=b("subscribeWithSelector",u=>(l,a,s)=>{const o=s.subscribe;return s.subscribe=(e,v,d)=>{let h=e;if(v){const m=(d==null?void 0:d.equalityFn)||Object.is;let i=e(s.getState());h=p=>{const f=e(p);if(!m(i,f)){const g=i;v(i=f,g)}},d!=null&&d.fireImmediately&&v(i,i)}return o(h)},u(l,a,s)}),k=b("combine",(u,l)=>(...a)=>Object.assign({},u,l(...a)));function E(u){let l;try{l=u()}catch{return}return{getItem:a=>{var s;const o=v=>v===null?null:JSON.parse(v),e=(s=l.getItem(a))!=null?s:null;return e instanceof Promise?e.then(o):o(e)},setItem:(a,s)=>l.setItem(a,JSON.stringify(s)),removeItem:a=>l.removeItem(a)}}const O=u=>l=>{try{const a=u(l);return a instanceof Promise?a:{then(s){return O(s)(a)},catch(s){return this}}}catch(a){return{then(s){return this},catch(s){return O(s)(a)}}}},N=(u,l)=>(a,s,o)=>{let e={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:n=>n,version:0,merge:(n,t)=>({...t,...n}),...l},v=!1;const d=new Set,h=new Set;let m;try{m=e.getStorage()}catch{}if(!m)return u((...n)=>{console.warn(`[zustand persist middleware] Unable to update item '${e.name}', the given storage is currently unavailable.`),a(...n)},s,o);const i=O(e.serialize),p=()=>{const n=e.partialize({...s()});let t;const c=i({state:n,version:e.version}).then(S=>m.setItem(e.name,S)).catch(S=>{t=S});if(t)throw t;return c},f=o.setState;o.setState=(n,t)=>{f(n,t),p()};const g=u((...n)=>{a(...n),p()},s,o);let y;const r=()=>{var n;if(!m)return;v=!1,d.forEach(c=>c(s()));const t=((n=e.onRehydrateStorage)==null?void 0:n.call(e,s()))||void 0;return O(m.getItem.bind(m))(e.name).then(c=>{if(c)return e.deserialize(c)}).then(c=>{if(c)if(typeof c.version=="number"&&c.version!==e.version){if(e.migrate)return e.migrate(c.state,c.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return c.state}).then(c=>{var S;return y=e.merge(c,(S=s())!=null?S:g),a(y,!0),p()}).then(()=>{t==null||t(y,void 0),v=!0,h.forEach(c=>c(y))}).catch(c=>{t==null||t(void 0,c)})};return o.persist={setOptions:n=>{e={...e,...n},n.getStorage&&(m=n.getStorage())},clearStorage:()=>{m==null||m.removeItem(e.name)},getOptions:()=>e,rehydrate:()=>r(),hasHydrated:()=>v,onHydrate:n=>(d.add(n),()=>{d.delete(n)}),onFinishHydration:n=>(h.add(n),()=>{h.delete(n)})},r(),y||g},z=(u,l)=>(a,s,o)=>{let e={storage:E(()=>localStorage),partialize:r=>r,version:0,merge:(r,n)=>({...n,...r}),...l},v=!1;const d=new Set,h=new Set;let m=e.storage;if(!m)return u((...r)=>{console.warn(`[zustand persist middleware] Unable to update item '${e.name}', the given storage is currently unavailable.`),a(...r)},s,o);const i=()=>{const r=e.partialize({...s()});return m.setItem(e.name,{state:r,version:e.version})},p=o.setState;o.setState=(r,n)=>{p(r,n),i()};const f=u((...r)=>{a(...r),i()},s,o);let g;const y=()=>{var r;if(!m)return;v=!1,d.forEach(t=>t(s()));const n=((r=e.onRehydrateStorage)==null?void 0:r.call(e,s()))||void 0;return O(m.getItem.bind(m))(e.name).then(t=>{if(t)if(typeof t.version=="number"&&t.version!==e.version){if(e.migrate)return e.migrate(t.state,t.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return t.state}).then(t=>{var c;return g=e.merge(t,(c=s())!=null?c:f),a(g,!0),i()}).then(()=>{n==null||n(g,void 0),v=!0,h.forEach(t=>t(g))}).catch(t=>{n==null||n(void 0,t)})};return o.persist={setOptions:r=>{e={...e,...r},r.storage&&(m=r.storage)},clearStorage:()=>{m==null||m.removeItem(e.name)},getOptions:()=>e,rehydrate:()=>y(),hasHydrated:()=>v,onHydrate:r=>(d.add(r),()=>{d.delete(r)}),onFinishHydration:r=>(h.add(r),()=>{h.delete(r)})},y(),g||f},D=b("persist",(u,l)=>"getStorage"in l||"serialize"in l||"deserialize"in l?N(u,l):z(u,l))}}});
