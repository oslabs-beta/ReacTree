import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { colorPropType } from '../Types.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var BREAKPOINTS = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs',
];
var CPlaceholder = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, animation = _a.animation, className = _a.className, color = _a.color, _c = _a.component, Component = _c === void 0 ? 'span' : _c, size = _a.size, rest = __rest(_a, ["children", "animation", "className", "color", "component", "size"]);
    var repsonsiveClassNames = [];
    BREAKPOINTS.forEach(function (bp) {
        var breakpoint = rest[bp];
        delete rest[bp];
        var infix = bp === 'xs' ? '' : "-".concat(bp);
        if (typeof breakpoint === 'number') {
            repsonsiveClassNames.push("col".concat(infix, "-").concat(breakpoint));
        }
        if (typeof breakpoint === 'boolean') {
            repsonsiveClassNames.push("col".concat(infix));
        }
    });
    var _className = classNames(animation ? "placeholder-".concat(animation) : 'placeholder', (_b = {},
        _b["bg-".concat(color)] = color,
        _b["placeholder-".concat(size)] = size,
        _b), repsonsiveClassNames, className);
    return (React__default.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));
});
CPlaceholder.propTypes = {
    animation: propTypesExports.oneOf(['glow', 'wave']),
    children: propTypesExports.node,
    className: propTypesExports.string,
    color: colorPropType,
    component: propTypesExports.elementType,
    size: propTypesExports.oneOf(['xs', 'sm', 'lg']),
};
CPlaceholder.displayName = 'CPlaceholder';

export { CPlaceholder };
//# sourceMappingURL=CPlaceholder.js.map
