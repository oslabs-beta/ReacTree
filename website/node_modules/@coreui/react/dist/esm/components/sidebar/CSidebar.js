import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef, useRef, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import isVisible from '../../utils/isVisible.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { CBackdrop } from '../backdrop/CBackdrop.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var isOnMobile = function (element) {
    return Boolean(getComputedStyle(element).getPropertyValue('--cui-is-mobile'));
};
var CSidebar = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, className = _a.className, narrow = _a.narrow, onHide = _a.onHide, onShow = _a.onShow, onVisibleChange = _a.onVisibleChange, overlaid = _a.overlaid, position = _a.position, size = _a.size, unfoldable = _a.unfoldable, visible = _a.visible, rest = __rest(_a, ["children", "className", "narrow", "onHide", "onShow", "onVisibleChange", "overlaid", "position", "size", "unfoldable", "visible"]);
    var sidebarRef = useRef(null);
    var forkedRef = useForkedRef(ref, sidebarRef);
    var _c = useState(false), mobile = _c[0], setMobile = _c[1];
    var _d = useState(visible), _visible = _d[0], setVisible = _d[1];
    var _e = useState(), inViewport = _e[0], setInViewport = _e[1];
    useEffect(function () {
        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));
        setVisible(visible);
    }, [visible]);
    useEffect(function () {
        typeof inViewport !== 'undefined' && onVisibleChange && onVisibleChange(inViewport);
        !inViewport && onHide && onHide();
        inViewport && onShow && onShow();
    }, [inViewport]);
    useEffect(function () {
        mobile && visible && setVisible(false);
    }, [mobile]);
    useEffect(function () {
        var _a, _b;
        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));
        sidebarRef.current && setInViewport(isVisible(sidebarRef.current));
        window.addEventListener('resize', function () { return handleResize(); });
        window.addEventListener('mouseup', handleClickOutside);
        window.addEventListener('keyup', handleKeyup);
        (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseup', handleOnClick);
        (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('transitionend', function () {
            sidebarRef.current && setInViewport(isVisible(sidebarRef.current));
        });
        return function () {
            var _a, _b;
            window.removeEventListener('resize', function () { return handleResize(); });
            window.removeEventListener('mouseup', handleClickOutside);
            window.removeEventListener('keyup', handleKeyup);
            (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', handleOnClick);
            (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('transitionend', function () {
                sidebarRef.current && setInViewport(isVisible(sidebarRef.current));
            });
        };
    });
    var handleHide = function () {
        setVisible(false);
    };
    var handleResize = function () {
        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));
        sidebarRef.current && setInViewport(isVisible(sidebarRef.current));
    };
    var handleKeyup = function (event) {
        if (mobile &&
            sidebarRef.current &&
            !sidebarRef.current.contains(event.target)) {
            handleHide();
        }
    };
    var handleClickOutside = function (event) {
        if (mobile &&
            sidebarRef.current &&
            !sidebarRef.current.contains(event.target)) {
            handleHide();
        }
    };
    var handleOnClick = function (event) {
        var target = event.target;
        target &&
            target.classList.contains('nav-link') &&
            !target.classList.contains('nav-group-toggle') &&
            mobile &&
            handleHide();
    };
    var _className = classNames('sidebar', (_b = {
            'sidebar-narrow': narrow,
            'sidebar-overlaid': overlaid
        },
        _b["sidebar-".concat(position)] = position,
        _b["sidebar-".concat(size)] = size,
        _b['sidebar-narrow-unfoldable'] = unfoldable,
        _b.show = _visible === true && mobile,
        _b.hide = _visible === false && !mobile,
        _b), className);
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement("div", __assign({ className: _className }, rest, { ref: forkedRef }), children),
        typeof window !== 'undefined' &&
            mobile &&
            createPortal(React__default.createElement(CBackdrop, { className: "sidebar-backdrop", visible: _visible }), document.body)));
});
CSidebar.propTypes = {
    children: propTypesExports.node,
    className: propTypesExports.string,
    narrow: propTypesExports.bool,
    onHide: propTypesExports.func,
    onShow: propTypesExports.func,
    onVisibleChange: propTypesExports.func,
    overlaid: propTypesExports.bool,
    position: propTypesExports.oneOf(['fixed', 'sticky']),
    size: propTypesExports.oneOf(['sm', 'lg', 'xl']),
    unfoldable: propTypesExports.bool,
    visible: propTypesExports.bool,
};
CSidebar.displayName = 'CSidebar';

export { CSidebar };
//# sourceMappingURL=CSidebar.js.map
