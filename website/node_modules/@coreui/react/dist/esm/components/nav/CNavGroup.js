import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef, useState, useRef, useContext, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import '../../node_modules/react-transition-group/esm/CSSTransition.js';
import '../../node_modules/react-transition-group/esm/ReplaceTransition.js';
import '../../node_modules/react-transition-group/esm/SwitchTransition.js';
import '../../node_modules/react-transition-group/esm/TransitionGroup.js';
import Transition from '../../node_modules/react-transition-group/esm/Transition.js';
import { CNavContext } from '../sidebar/CSidebarNav.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CNavGroup = forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, compact = _a.compact, idx = _a.idx, toggler = _a.toggler, visible = _a.visible, rest = __rest(_a, ["children", "className", "compact", "idx", "toggler", "visible"]);
    var _b = useState(), height = _b[0], setHeight = _b[1];
    var navItemsRef = useRef(null);
    var _c = useContext(CNavContext), visibleGroup = _c.visibleGroup, setVisibleGroup = _c.setVisibleGroup;
    var _d = useState(Boolean(visible || (idx && visibleGroup && visibleGroup.toString().startsWith(idx.toString())))), _visible = _d[0], setVisible = _d[1];
    useEffect(function () {
        setVisible(Boolean(idx && visibleGroup && visibleGroup.toString().startsWith(idx.toString())));
    }, [visibleGroup]);
    var handleTogglerOnCLick = function (event) {
        event.preventDefault();
        setVisibleGroup(_visible ? ((idx === null || idx === void 0 ? void 0 : idx.toString().includes('.')) ? idx.slice(0, idx.lastIndexOf('.')) : '') : idx);
        setVisible(!_visible);
    };
    var style = {
        height: 0,
    };
    var onEntering = function () {
        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);
    };
    var onEntered = function () {
        setHeight('auto');
    };
    var onExit = function () {
        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);
    };
    var onExiting = function () {
        var _a;
        // @ts-expect-error reflow is necessary to get correct height of the element
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        (_a = navItemsRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;
        setHeight(0);
    };
    var onExited = function () {
        setHeight(0);
    };
    var transitionStyles = {
        entering: { display: 'block', height: height },
        entered: { display: 'block', height: height },
        exiting: { display: 'block', height: height },
        exited: { height: height },
    };
    var _className = classNames('nav-group', { show: _visible }, className);
    return (React__default.createElement("li", __assign({ className: _className }, rest, { ref: ref }),
        toggler && (React__default.createElement("a", { className: "nav-link nav-group-toggle", onClick: function (event) { return handleTogglerOnCLick(event); } }, toggler)),
        React__default.createElement(Transition, { in: _visible, nodeRef: navItemsRef, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: 300 }, function (state) { return (React__default.createElement("ul", { className: classNames('nav-group-items', {
                compact: compact,
            }), style: __assign(__assign({}, style), transitionStyles[state]), ref: navItemsRef }, React__default.Children.map(children, function (child, index) {
            if (React__default.isValidElement(child)) {
                return React__default.cloneElement(child, {
                    key: index,
                    idx: "".concat(idx, ".").concat(index),
                });
            }
            return;
        }))); })));
});
CNavGroup.propTypes = {
    children: propTypesExports.node,
    className: propTypesExports.string,
    compact: propTypesExports.bool,
    idx: propTypesExports.string,
    toggler: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.node]),
    visible: propTypesExports.bool,
};
CNavGroup.displayName = 'CNavGroup';

export { CNavGroup };
//# sourceMappingURL=CNavGroup.js.map
