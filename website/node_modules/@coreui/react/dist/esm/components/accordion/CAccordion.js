import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { createContext, forwardRef, useState } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CAccordionContext = createContext({});
var CAccordion = forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.activeItemKey, activeItemKey = _b === void 0 ? undefined : _b, _c = _a.alwaysOpen, alwaysOpen = _c === void 0 ? false : _c, className = _a.className, flush = _a.flush, rest = __rest(_a, ["children", "activeItemKey", "alwaysOpen", "className", "flush"]);
    var _d = useState(activeItemKey), _activeItemKey = _d[0], setActiveKey = _d[1];
    var _className = classNames('accordion', { 'accordion-flush': flush }, className);
    return (React__default.createElement("div", __assign({ className: _className }, rest, { ref: ref }),
        React__default.createElement(CAccordionContext.Provider, { value: { _activeItemKey: _activeItemKey, alwaysOpen: alwaysOpen, setActiveKey: setActiveKey } }, children)));
});
CAccordion.propTypes = {
    alwaysOpen: propTypesExports.bool,
    activeItemKey: propTypesExports.oneOfType([propTypesExports.number, propTypesExports.string]),
    children: propTypesExports.node,
    className: propTypesExports.string,
    flush: propTypesExports.bool,
};
CAccordion.displayName = 'CAccordion';

export { CAccordion, CAccordionContext };
//# sourceMappingURL=CAccordion.js.map
