import { __rest, __spreadArray, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef, useState, useRef, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import { createPortal } from 'react-dom';
import classNames from '../../node_modules/classnames/index.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CToaster = forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, placement = _a.placement, push = _a.push, rest = __rest(_a, ["children", "className", "placement", "push"]);
    var _b = useState([]), toasts = _b[0], setToasts = _b[1];
    var index = useRef(0);
    useEffect(function () {
        index.current++;
        push && addToast(push);
    }, [push]);
    var addToast = function (push) {
        setToasts(function (state) { return __spreadArray(__spreadArray([], state, true), [
            React__default.cloneElement(push, {
                index: index.current,
                key: index.current,
                onClose: function (index) {
                    return setToasts(function (state) { return state.filter(function (i) { return i.props.index !== index; }); });
                },
            }),
        ], false); });
    };
    var _className = classNames('toaster toast-container p-3', {
        'position-fixed': placement,
        'top-0': placement && placement.includes('top'),
        'top-50 translate-middle-y': placement && placement.includes('middle'),
        'bottom-0': placement && placement.includes('bottom'),
        'start-0': placement && placement.includes('start'),
        'start-50 translate-middle-x': placement && placement.includes('center'),
        'end-0': placement && placement.includes('end'),
    }, className);
    var toaster = function (ref) {
        return toasts.length > 0 || children ? (React__default.createElement("div", __assign({ className: _className }, rest, { ref: ref }),
            children,
            toasts.map(function (toast) { return React__default.cloneElement(toast, { visible: true }); }))) : null;
    };
    return typeof window !== 'undefined' && placement
        ? createPortal(toaster(ref), document.body)
        : toaster(ref);
});
CToaster.propTypes = {
    children: propTypesExports.node,
    className: propTypesExports.string,
    placement: propTypesExports.oneOfType([
        propTypesExports.string,
        propTypesExports.oneOf([
            'top-start',
            'top-center',
            'top-end',
            'middle-start',
            'middle-center',
            'middle-end',
            'bottom-start',
            'bottom-center',
            'bottom-end',
        ]),
    ]),
    push: propTypesExports.any,
};
CToaster.displayName = 'CToaster';

export { CToaster };
//# sourceMappingURL=CToaster.js.map
