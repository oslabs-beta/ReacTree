import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { createContext, forwardRef, useRef, useState, useEffect } from 'react';
import '../../node_modules/react-transition-group/esm/CSSTransition.js';
import '../../node_modules/react-transition-group/esm/ReplaceTransition.js';
import '../../node_modules/react-transition-group/esm/SwitchTransition.js';
import '../../node_modules/react-transition-group/esm/TransitionGroup.js';
import Transition from '../../node_modules/react-transition-group/esm/Transition.js';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { colorPropType } from '../Types.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CToastContext = createContext({});
var CToast = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, _c = _a.animation, animation = _c === void 0 ? true : _c, _d = _a.autohide, autohide = _d === void 0 ? true : _d, className = _a.className, color = _a.color, _e = _a.delay, delay = _e === void 0 ? 5000 : _e, index = _a.index, key = _a.key, _f = _a.visible, visible = _f === void 0 ? false : _f, onClose = _a.onClose, onShow = _a.onShow, rest = __rest(_a, ["children", "animation", "autohide", "className", "color", "delay", "index", "key", "visible", "onClose", "onShow"]);
    var toastRef = useRef();
    var forkedRef = useForkedRef(ref, toastRef);
    var _g = useState(false), _visible = _g[0], setVisible = _g[1];
    var timeout = useRef();
    useEffect(function () {
        setVisible(visible);
    }, [visible]);
    var contextValues = {
        visible: _visible,
        setVisible: setVisible,
    };
    // triggered on mount and destroy
    useEffect(function () { return function () { return clearTimeout(timeout.current); }; }, []);
    useEffect(function () {
        _autohide();
    }, [_visible]);
    var _autohide = function () {
        if (autohide) {
            clearTimeout(timeout.current);
            timeout.current = window.setTimeout(function () {
                setVisible(false);
            }, delay);
        }
    };
    var _className = classNames('toast', (_b = {
            fade: animation
        },
        _b["bg-".concat(color)] = color,
        _b['border-0'] = color,
        _b), className);
    var getTransitionClass = function (state) {
        return state === 'entering'
            ? 'showing'
            : state === 'entered'
                ? 'show'
                : state === 'exiting'
                    ? 'showing'
                    : 'fade';
    };
    return (React__default.createElement(Transition, { in: _visible, nodeRef: toastRef, onEnter: function () { return onShow && onShow(index ? index : null); }, onExited: function () { return onClose && onClose(index ? index : null); }, timeout: 250, unmountOnExit: true }, function (state) {
        var transitionClass = getTransitionClass(state);
        return (React__default.createElement(CToastContext.Provider, { value: contextValues },
            React__default.createElement("div", __assign({ className: classNames(_className, transitionClass), "aria-live": "assertive", "aria-atomic": "true", role: "alert", onMouseEnter: function () { return clearTimeout(timeout.current); }, onMouseLeave: function () { return _autohide(); } }, rest, { key: key, ref: forkedRef }), children)));
    }));
});
CToast.propTypes = {
    animation: propTypesExports.bool,
    autohide: propTypesExports.bool,
    children: propTypesExports.node,
    className: propTypesExports.string,
    color: colorPropType,
    delay: propTypesExports.number,
    index: propTypesExports.number,
    key: propTypesExports.number,
    onClose: propTypesExports.func,
    onShow: propTypesExports.func,
    visible: propTypesExports.bool,
};
CToast.displayName = 'CToast';

export { CToast, CToastContext };
//# sourceMappingURL=CToast.js.map
