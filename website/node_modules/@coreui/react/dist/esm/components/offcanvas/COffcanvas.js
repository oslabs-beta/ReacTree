import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import '../../node_modules/prop-types/index.js';
import React__default, { forwardRef, useState, useRef, useEffect, useCallback } from 'react';
import { createPortal } from 'react-dom';
import '../../node_modules/react-transition-group/esm/CSSTransition.js';
import '../../node_modules/react-transition-group/esm/ReplaceTransition.js';
import '../../node_modules/react-transition-group/esm/SwitchTransition.js';
import '../../node_modules/react-transition-group/esm/TransitionGroup.js';
import Transition from '../../node_modules/react-transition-group/esm/Transition.js';
import classNames from '../../node_modules/classnames/index.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { CBackdrop } from '../backdrop/CBackdrop.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var COffcanvas = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, _c = _a.backdrop, backdrop = _c === void 0 ? true : _c, className = _a.className, _d = _a.keyboard, keyboard = _d === void 0 ? true : _d, onHide = _a.onHide, onShow = _a.onShow, placement = _a.placement, _e = _a.portal, portal = _e === void 0 ? true : _e, _f = _a.scroll, scroll = _f === void 0 ? false : _f, _g = _a.visible, visible = _g === void 0 ? false : _g, rest = __rest(_a, ["children", "backdrop", "className", "keyboard", "onHide", "onShow", "placement", "portal", "scroll", "visible"]);
    var _h = useState(visible), _visible = _h[0], setVisible = _h[1];
    var offcanvasRef = useRef(null);
    var forkedRef = useForkedRef(ref, offcanvasRef);
    useEffect(function () {
        setVisible(visible);
    }, [visible]);
    useEffect(function () {
        if (_visible) {
            if (!scroll) {
                document.body.style.overflow = 'hidden';
                document.body.style.paddingRight = '0px';
            }
            return;
        }
        if (!scroll) {
            document.body.style.removeProperty('overflow');
            document.body.style.removeProperty('padding-right');
        }
    }, [_visible]);
    var _className = classNames('offcanvas', (_b = {},
        _b["offcanvas-".concat(placement)] = placement,
        _b.show = _visible,
        _b), className);
    var transitionStyles = {
        entering: { visibility: 'visible' },
        entered: { visibility: 'visible' },
        exiting: { visibility: 'visible' },
        exited: { visibility: 'hidden' },
    };
    var handleDismiss = function () {
        setVisible(false);
    };
    var handleKeyDown = useCallback(function (event) {
        if (event.key === 'Escape' && keyboard) {
            return handleDismiss();
        }
    }, [ref, handleDismiss]);
    var offcanvas = function (ref, state) {
        return (React__default.createElement(React__default.Fragment, null,
            React__default.createElement("div", __assign({ className: _className, role: "dialog", style: __assign({}, transitionStyles[state]), tabIndex: -1, onKeyDown: handleKeyDown }, rest, { ref: ref }), children)));
    };
    return (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(Transition, { in: _visible, nodeRef: offcanvasRef, onEnter: onShow, onEntered: function () { var _a; return (_a = offcanvasRef.current) === null || _a === void 0 ? void 0 : _a.focus(); }, onExit: onHide, timeout: 300 }, function (state) {
            return typeof window !== 'undefined' && portal
                ? createPortal(offcanvas(forkedRef, state), document.body)
                : offcanvas(forkedRef, state);
        }),
        typeof window !== 'undefined' && portal
            ? backdrop &&
                createPortal(React__default.createElement(CBackdrop, { className: "offcanvas-backdrop", onClick: handleDismiss, visible: _visible }), document.body)
            : backdrop && (React__default.createElement(CBackdrop, { className: "offcanvas-backdrop", onClick: handleDismiss, visible: _visible }))));
});
COffcanvas.propTypes = {
    backdrop: propTypesExports.bool,
    children: propTypesExports.node,
    className: propTypesExports.string,
    keyboard: propTypesExports.bool,
    onHide: propTypesExports.func,
    onShow: propTypesExports.func,
    placement: propTypesExports.oneOf(['start', 'end', 'top', 'bottom'])
        .isRequired,
    portal: propTypesExports.bool,
    scroll: propTypesExports.bool,
    visible: propTypesExports.bool,
};
COffcanvas.displayName = 'COffcanvas';

export { COffcanvas };
//# sourceMappingURL=COffcanvas.js.map
