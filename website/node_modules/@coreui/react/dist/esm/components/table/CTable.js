import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { colorPropType } from '../Types.js';
import { CTableHead } from './CTableHead.js';
import { CTableHeaderCell } from './CTableHeaderCell.js';
import { CTableBody } from './CTableBody.js';
import { CTableDataCell } from './CTableDataCell.js';
import { CTableRow } from './CTableRow.js';
import { CTableFoot } from './CTableFoot.js';
import { CTableCaption } from './CTableCaption.js';
import { CTableResponsiveWrapper } from './CTableResponsiveWrapper.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CTable = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, align = _a.align, borderColor = _a.borderColor, bordered = _a.bordered, borderless = _a.borderless, caption = _a.caption, captionTop = _a.captionTop, className = _a.className, color = _a.color, columns = _a.columns, footer = _a.footer, hover = _a.hover, _c = _a.items, items = _c === void 0 ? [] : _c, responsive = _a.responsive, small = _a.small, striped = _a.striped, stripedColumns = _a.stripedColumns, tableFootProps = _a.tableFootProps, tableHeadProps = _a.tableHeadProps, rest = __rest(_a, ["children", "align", "borderColor", "bordered", "borderless", "caption", "captionTop", "className", "color", "columns", "footer", "hover", "items", "responsive", "small", "striped", "stripedColumns", "tableFootProps", "tableHeadProps"]);
    var _className = classNames('table', (_b = {},
        _b["align-".concat(align)] = align,
        _b["border-".concat(borderColor)] = borderColor,
        _b["caption-top"] = captionTop || caption === 'top',
        _b['table-bordered'] = bordered,
        _b['table-borderless'] = borderless,
        _b["table-".concat(color)] = color,
        _b['table-hover'] = hover,
        _b['table-sm'] = small,
        _b['table-striped'] = striped,
        _b['table-striped-columns'] = stripedColumns,
        _b), className);
    var rawColumnNames = columns
        ? columns.map(function (column) {
            if (typeof column === 'object')
                return column.key;
            else
                return column;
        })
        : Object.keys(items[0] || {}).filter(function (el) { return el.charAt(0) !== '_'; });
    var pretifyName = function (name) {
        return name
            .replace(/[-_.]/g, ' ')
            .replace(/ +/g, ' ')
            .replace(/([a-z0-9])([A-Z])/g, '$1 $2')
            .split(' ')
            .map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); })
            .join(' ');
    };
    var label = function (column) {
        return typeof column === 'object'
            ? column.label !== undefined
                ? column.label
                : pretifyName(column.key)
            : pretifyName(column);
    };
    return (React__default.createElement(CTableResponsiveWrapper, { responsive: responsive },
        React__default.createElement("table", __assign({ className: _className }, rest, { ref: ref }),
            ((caption && caption !== 'top') || captionTop) && (React__default.createElement(CTableCaption, null, caption || captionTop)),
            columns && (React__default.createElement(CTableHead, __assign({}, tableHeadProps),
                React__default.createElement(CTableRow, null, columns.map(function (column, index) { return (React__default.createElement(CTableHeaderCell, __assign({}, (column._props && __assign({}, column._props)), (column._style && { style: __assign({}, column._style) }), { key: index }), label(column))); })))),
            items && (React__default.createElement(CTableBody, null, items.map(function (item, index) { return (React__default.createElement(CTableRow, __assign({}, (item._props && __assign({}, item._props)), { key: index }), rawColumnNames.map(function (colName, index) {
                return item[colName] ? (React__default.createElement(CTableDataCell, __assign({}, (item._cellProps && __assign(__assign({}, (item._cellProps['all'] && __assign({}, item._cellProps['all']))), (item._cellProps[colName] && __assign({}, item._cellProps[colName])))), { key: index }), item[colName])) : null;
            }))); }))),
            children,
            footer && (React__default.createElement(CTableFoot, __assign({}, tableFootProps),
                React__default.createElement(CTableRow, null, footer.map(function (item, index) { return (React__default.createElement(CTableDataCell, __assign({}, (item._props && __assign({}, item._props)), { key: index }), typeof item === 'object' ? item.label : item)); })))))));
});
CTable.propTypes = {
    align: propTypesExports.oneOf(['bottom', 'middle', 'top']),
    borderColor: propTypesExports.string,
    bordered: propTypesExports.bool,
    borderless: propTypesExports.bool,
    caption: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.oneOf(['top'])]),
    captionTop: propTypesExports.string,
    children: propTypesExports.node,
    className: propTypesExports.string,
    color: colorPropType,
    columns: propTypesExports.array,
    footer: propTypesExports.array,
    hover: propTypesExports.bool,
    items: propTypesExports.array,
    responsive: propTypesExports.oneOfType([
        propTypesExports.bool,
        propTypesExports.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),
    ]),
    small: propTypesExports.bool,
    striped: propTypesExports.bool,
    stripedColumns: propTypesExports.bool,
    tableFootProps: propTypesExports.shape(__assign({}, CTableFoot.propTypes)),
    tableHeadProps: propTypesExports.shape(__assign({}, CTableHead.propTypes)),
};
CTable.displayName = 'CTable';

export { CTable };
//# sourceMappingURL=CTable.js.map
