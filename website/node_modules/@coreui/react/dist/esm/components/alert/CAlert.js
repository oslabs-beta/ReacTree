import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef, useRef, useState, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import '../../node_modules/react-transition-group/esm/CSSTransition.js';
import '../../node_modules/react-transition-group/esm/ReplaceTransition.js';
import '../../node_modules/react-transition-group/esm/SwitchTransition.js';
import '../../node_modules/react-transition-group/esm/TransitionGroup.js';
import Transition from '../../node_modules/react-transition-group/esm/Transition.js';
import { colorPropType } from '../Types.js';
import { CCloseButton } from '../close-button/CCloseButton.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CAlert = forwardRef(function (_a, ref) {
    var children = _a.children, className = _a.className, _b = _a.color, color = _b === void 0 ? 'primary' : _b, dismissible = _a.dismissible, variant = _a.variant, _c = _a.visible, visible = _c === void 0 ? true : _c, onClose = _a.onClose, rest = __rest(_a, ["children", "className", "color", "dismissible", "variant", "visible", "onClose"]);
    var alertRef = useRef(null);
    var forkedRef = useForkedRef(ref, alertRef);
    var _d = useState(visible), _visible = _d[0], setVisible = _d[1];
    useEffect(function () {
        setVisible(visible);
    }, [visible]);
    var _className = classNames('alert', variant === 'solid' ? "bg-".concat(color, " text-white") : "alert-".concat(color), {
        'alert-dismissible fade': dismissible,
    }, className);
    var getTransitionClass = function (state) {
        return state === 'entered' && 'show';
    };
    return (React__default.createElement(Transition, { in: _visible, mountOnEnter: true, nodeRef: alertRef, onExit: onClose, timeout: 150, unmountOnExit: true }, function (state) {
        var transitionClass = getTransitionClass(state);
        return (React__default.createElement("div", __assign({ className: classNames(_className, transitionClass), role: "alert" }, rest, { ref: forkedRef }),
            children,
            dismissible && React__default.createElement(CCloseButton, { onClick: function () { return setVisible(false); } })));
    }));
});
CAlert.propTypes = {
    children: propTypesExports.node,
    className: propTypesExports.string,
    color: colorPropType.isRequired,
    dismissible: propTypesExports.bool,
    onClose: propTypesExports.func,
    variant: propTypesExports.string,
    visible: propTypesExports.bool,
};
CAlert.displayName = 'CAlert';

export { CAlert };
//# sourceMappingURL=CAlert.js.map
