import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { createContext, forwardRef, useState, useRef, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { Manager } from '../../node_modules/react-popper/lib/esm/Manager.js';
import 'react-dom';
import '../../node_modules/warning/warning.js';
import { placementPropType } from '../Types.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CDropdownContext = createContext({});
var CDropdown = forwardRef(function (_a, ref) {
    var children = _a.children, alignment = _a.alignment, _b = _a.autoClose, autoClose = _b === void 0 ? true : _b, className = _a.className, dark = _a.dark, direction = _a.direction, onHide = _a.onHide, onShow = _a.onShow, _c = _a.placement, placement = _c === void 0 ? 'bottom-start' : _c, _d = _a.popper, popper = _d === void 0 ? true : _d, _e = _a.variant, variant = _e === void 0 ? 'btn-group' : _e, _f = _a.component, component = _f === void 0 ? 'div' : _f, _g = _a.visible, visible = _g === void 0 ? false : _g, rest = __rest(_a, ["children", "alignment", "autoClose", "className", "dark", "direction", "onHide", "onShow", "placement", "popper", "variant", "component", "visible"]);
    var _h = useState(visible), _visible = _h[0], setVisible = _h[1];
    var dropdownRef = useRef(null);
    var dropdownToggleRef = useRef(null);
    var forkedRef = useForkedRef(ref, dropdownRef);
    var Component = variant === 'nav-item' ? 'li' : component;
    // Disable popper if responsive aligment is set.
    if (typeof alignment === 'object') {
        popper = false;
    }
    var contextValues = {
        alignment: alignment,
        autoClose: autoClose,
        dark: dark,
        direction: direction,
        dropdownToggleRef: dropdownToggleRef,
        placement: placement,
        popper: popper,
        variant: variant,
        visible: _visible,
        setVisible: setVisible,
    };
    var _className = classNames(variant === 'nav-item' ? 'nav-item dropdown' : variant, {
        show: _visible,
    }, direction === 'center'
        ? 'dropdown-center'
        : direction === 'dropup-center'
            ? 'dropup dropup-center'
            : direction, className);
    useEffect(function () {
        setVisible(visible);
    }, [visible]);
    useEffect(function () {
        _visible && onShow && onShow();
        !_visible && onHide && onHide();
    }, [_visible]);
    var dropdownContent = function () {
        return variant === 'input-group' ? (React__default.createElement(React__default.Fragment, null, children)) : (React__default.createElement(Component, __assign({ className: _className }, rest, { ref: forkedRef }), children));
    };
    return popper ? (React__default.createElement(CDropdownContext.Provider, { value: contextValues },
        React__default.createElement(Manager, null, dropdownContent()))) : (React__default.createElement(CDropdownContext.Provider, { value: contextValues }, dropdownContent()));
});
var alignmentDirection = propTypesExports.oneOf(['start', 'end']);
CDropdown.propTypes = {
    // @ts-expect-error TODO: we have to find a solution
    alignment: propTypesExports.oneOfType([
        alignmentDirection,
        propTypesExports.shape({ xs: alignmentDirection }),
        propTypesExports.shape({ sm: alignmentDirection }),
        propTypesExports.shape({ md: alignmentDirection }),
        propTypesExports.shape({ lg: alignmentDirection }),
        propTypesExports.shape({ xl: alignmentDirection }),
        propTypesExports.shape({ xxl: alignmentDirection }),
    ]),
    autoClose: propTypesExports.oneOfType([
        propTypesExports.bool,
        propTypesExports.oneOf(['inside', 'outside']),
    ]),
    children: propTypesExports.node,
    className: propTypesExports.string,
    component: propTypesExports.elementType,
    dark: propTypesExports.bool,
    direction: propTypesExports.oneOf(['center', 'dropup', 'dropup-center', 'dropend', 'dropstart']),
    onHide: propTypesExports.func,
    onShow: propTypesExports.func,
    placement: placementPropType,
    popper: propTypesExports.bool,
    variant: propTypesExports.oneOf(['btn-group', 'dropdown', 'input-group', 'nav-item']),
    visible: propTypesExports.bool,
};
CDropdown.displayName = 'CDropdown';

export { CDropdown, CDropdownContext };
//# sourceMappingURL=CDropdown.js.map
