import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { useContext, useRef, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { Popper } from '../../node_modules/react-popper/lib/esm/Popper.js';
import '../../node_modules/react-popper/lib/esm/Manager.js';
import '../../node_modules/warning/warning.js';
import 'react-dom';
import { CDropdownContext } from './CDropdown.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CDropdownMenu = function (_a) {
    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'ul' : _b, rest = __rest(_a, ["children", "className", "component"]);
    var _c = useContext(CDropdownContext), alignment = _c.alignment, autoClose = _c.autoClose, dark = _c.dark, direction = _c.direction, dropdownToggleRef = _c.dropdownToggleRef, placement = _c.placement, popper = _c.popper, visible = _c.visible, setVisible = _c.setVisible;
    var dropdownMenuRef = useRef(null);
    useEffect(function () {
        visible && window.addEventListener('mouseup', handleMouseUp);
        visible && window.addEventListener('keyup', handleKeyup);
        return function () {
            window.removeEventListener('mouseup', handleMouseUp);
            window.removeEventListener('keyup', handleKeyup);
        };
    }, [visible]);
    var handleKeyup = function (event) {
        if (autoClose === false) {
            return;
        }
        if (event.key === 'Escape') {
            setVisible(false);
        }
    };
    var handleMouseUp = function (event) {
        var _a, _b;
        if (dropdownToggleRef && dropdownToggleRef.current.contains(event.target)) {
            return;
        }
        if (autoClose === true ||
            (autoClose === 'inside' && ((_a = dropdownMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) ||
            (autoClose === 'outside' && !((_b = dropdownMenuRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
            setTimeout(function () { return setVisible(false); }, 1);
            return;
        }
    };
    var _placement = placement;
    if (direction === 'center') {
        _placement = 'bottom';
    }
    if (direction === 'dropup') {
        _placement = 'top-start';
    }
    if (direction === 'dropup-center') {
        _placement = 'top';
    }
    if (direction === 'dropend') {
        _placement = 'right-start';
    }
    if (direction === 'dropstart') {
        _placement = 'left-start';
    }
    if (alignment === 'end') {
        _placement = 'bottom-end';
    }
    var alignmentClassNames = function (alignment) {
        var classNames = [];
        if (typeof alignment === 'object') {
            Object.keys(alignment).map(function (key) {
                classNames.push("dropdown-menu".concat(key === 'xs' ? '' : "-".concat(key), "-").concat(alignment[key]));
            });
        }
        if (typeof alignment === 'string') {
            classNames.push("dropdown-menu-".concat(alignment));
        }
        return classNames;
    };
    var _className = classNames('dropdown-menu', {
        'dropdown-menu-dark': dark,
        show: visible,
    }, alignment && alignmentClassNames(alignment), className);
    var dropdownMenuComponent = function (style, ref) {
        return (React__default.createElement(Component, __assign({ className: _className, ref: ref, style: style, role: "menu", "aria-hidden": !visible }, (!popper && { 'data-coreui-popper': 'static' }), rest), Component === 'ul'
            ? React__default.Children.map(children, function (child, index) {
                if (React__default.isValidElement(child)) {
                    return React__default.createElement("li", { key: index }, React__default.cloneElement(child));
                }
                return;
            })
            : children));
    };
    return popper && visible ? (React__default.createElement(Popper, { innerRef: dropdownMenuRef, placement: _placement }, function (_a) {
        var ref = _a.ref, style = _a.style;
        return dropdownMenuComponent(style, ref);
    })) : (dropdownMenuComponent());
};
CDropdownMenu.propTypes = {
    children: propTypesExports.node,
    className: propTypesExports.string,
    component: propTypesExports.elementType,
};
CDropdownMenu.displayName = 'CDropdownMenu';

export { CDropdownMenu };
//# sourceMappingURL=CDropdownMenu.js.map
