import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { useContext } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import '../../node_modules/react-popper/lib/esm/Manager.js';
import 'react-dom';
import { Reference } from '../../node_modules/react-popper/lib/esm/Reference.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { triggerPropType } from '../Types.js';
import { CButton } from '../button/CButton.js';
import { CDropdownContext } from './CDropdown.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CDropdownToggle = function (_a) {
    var children = _a.children, _b = _a.caret, caret = _b === void 0 ? true : _b, custom = _a.custom, className = _a.className, split = _a.split, _c = _a.trigger, trigger = _c === void 0 ? 'click' : _c, rest = __rest(_a, ["children", "caret", "custom", "className", "split", "trigger"]);
    var _d = useContext(CDropdownContext), dropdownToggleRef = _d.dropdownToggleRef, popper = _d.popper, variant = _d.variant, visible = _d.visible, setVisible = _d.setVisible;
    var _className = classNames({
        'dropdown-toggle': caret,
        'dropdown-toggle-split': split,
        'nav-link': variant === 'nav-item',
    }, className);
    var triggers = __assign(__assign({}, ((trigger === 'click' || trigger.includes('click')) && {
        onClick: function (event) {
            event.preventDefault();
            setVisible(!visible);
        },
    })), ((trigger === 'focus' || trigger.includes('focus')) && {
        onFocus: function () { return setVisible(true); },
        onBlur: function () { return setVisible(false); },
    }));
    var togglerProps = __assign(__assign({ className: _className, 'aria-expanded': visible }, (!rest.disabled && __assign({}, triggers))), triggers);
    // We use any because Toggler can be `a` as well as `button`.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var Toggler = function (ref) {
        return custom && React__default.isValidElement(children) ? (React__default.createElement(React__default.Fragment, null, React__default.cloneElement(children, __assign(__assign({ 'aria-expanded': visible }, (!rest.disabled && __assign({}, triggers))), { ref: useForkedRef(ref, dropdownToggleRef) })))) : variant === 'nav-item' ? (React__default.createElement("a", __assign({ href: "#" }, togglerProps, { ref: useForkedRef(ref, dropdownToggleRef) }), children)) : (React__default.createElement(CButton, __assign({ type: "button" }, togglerProps, { tabIndex: 0 }, rest, { ref: useForkedRef(ref, dropdownToggleRef) }),
            children,
            split && React__default.createElement("span", { className: "visually-hidden" }, "Toggle Dropdown")));
    };
    return popper ? React__default.createElement(Reference, null, function (_a) {
        var ref = _a.ref;
        return Toggler(ref);
    }) : Toggler(dropdownToggleRef);
};
CDropdownToggle.propTypes = {
    caret: propTypesExports.bool,
    children: propTypesExports.node,
    className: propTypesExports.string,
    custom: propTypesExports.bool,
    split: propTypesExports.bool,
    trigger: triggerPropType,
};
CDropdownToggle.displayName = 'CDropdownToggle';

export { CDropdownToggle };
//# sourceMappingURL=CDropdownToggle.js.map
