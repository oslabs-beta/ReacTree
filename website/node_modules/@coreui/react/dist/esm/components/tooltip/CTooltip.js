import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { useRef, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import classNames from '../../node_modules/classnames/index.js';
import '../../node_modules/prop-types/index.js';
import '../../node_modules/react-popper/lib/esm/Manager.js';
import { usePopper } from '../../node_modules/react-popper/lib/esm/usePopper.js';
import '../../node_modules/warning/warning.js';
import '../../node_modules/react-transition-group/esm/CSSTransition.js';
import '../../node_modules/react-transition-group/esm/ReplaceTransition.js';
import '../../node_modules/react-transition-group/esm/SwitchTransition.js';
import '../../node_modules/react-transition-group/esm/TransitionGroup.js';
import Transition from '../../node_modules/react-transition-group/esm/Transition.js';
import { triggerPropType } from '../Types.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CTooltip = function (_a) {
    var children = _a.children, className = _a.className, content = _a.content, _b = _a.offset, offset = _b === void 0 ? [0, 0] : _b, onHide = _a.onHide, onShow = _a.onShow, _c = _a.placement, placement = _c === void 0 ? 'top' : _c, _d = _a.trigger, trigger = _d === void 0 ? 'hover' : _d, visible = _a.visible, rest = __rest(_a, ["children", "className", "content", "offset", "onHide", "onShow", "placement", "trigger", "visible"]);
    var tooltipRef = useRef();
    var _e = useState(visible), _visible = _e[0], setVisible = _e[1];
    var _f = useState(null), referenceElement = _f[0], setReferenceElement = _f[1];
    var _g = useState(null), popperElement = _g[0], setPopperElement = _g[1];
    var _h = useState(null), arrowElement = _h[0], setArrowElement = _h[1];
    var _j = usePopper(referenceElement, popperElement, {
        modifiers: [
            { name: 'arrow', options: { element: arrowElement } },
            {
                name: 'offset',
                options: {
                    offset: offset,
                },
            },
        ],
        placement: placement,
    }), styles = _j.styles, attributes = _j.attributes;
    useEffect(function () {
        setVisible(visible);
    }, [visible]);
    var getTransitionClass = function (state) {
        return state === 'entering'
            ? 'fade'
            : state === 'entered'
                ? 'fade show'
                : state === 'exiting'
                    ? 'fade'
                    : 'fade';
    };
    return (React__default.createElement(React__default.Fragment, null,
        React__default.cloneElement(children, __assign(__assign(__assign({ ref: setReferenceElement }, ((trigger === 'click' || trigger.includes('click')) && {
            onClick: function () { return setVisible(!_visible); },
        })), ((trigger === 'focus' || trigger.includes('focus')) && {
            onFocus: function () { return setVisible(true); },
            onBlur: function () { return setVisible(false); },
        })), ((trigger === 'hover' || trigger.includes('hover')) && {
            onMouseEnter: function () { return setVisible(true); },
            onMouseLeave: function () { return setVisible(false); },
        }))),
        typeof window !== 'undefined' &&
            createPortal(React__default.createElement(Transition, { in: _visible, mountOnEnter: true, nodeRef: tooltipRef, onEnter: onShow, onExit: onHide, timeout: {
                    enter: 0,
                    exit: 200,
                }, unmountOnExit: true }, function (state) {
                var transitionClass = getTransitionClass(state);
                return (React__default.createElement("div", __assign({ className: classNames("tooltip bs-tooltip-".concat(placement === 'left' ? 'start' : placement === 'right' ? 'end' : placement), className, transitionClass), ref: setPopperElement, role: "tooltip", style: styles.popper }, attributes.popper, rest),
                    React__default.createElement("div", { className: "tooltip-arrow", style: styles.arrow, ref: setArrowElement }),
                    React__default.createElement("div", { className: "tooltip-inner" }, content)));
            }), document.body)));
};
CTooltip.propTypes = {
    children: propTypesExports.node,
    content: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.node]),
    offset: propTypesExports.any,
    onHide: propTypesExports.func,
    onShow: propTypesExports.func,
    placement: propTypesExports.oneOf(['auto', 'top', 'right', 'bottom', 'left']),
    trigger: triggerPropType,
    visible: propTypesExports.bool,
};
CTooltip.displayName = 'CTooltip';

export { CTooltip };
//# sourceMappingURL=CTooltip.js.map
