import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React__default, { forwardRef, useRef, useEffect } from 'react';
import '../../node_modules/prop-types/index.js';
import classNames from '../../node_modules/classnames/index.js';
import { useForkedRef } from '../../utils/hooks/useForkedRef.js';
import { CFormControlValidation } from './CFormControlValidation.js';
import { CFormLabel } from './CFormLabel.js';
import { exports as propTypesExports } from '../../_virtual/index.js';

var CFormCheck = forwardRef(function (_a, ref) {
    var _b;
    var className = _a.className, button = _a.button, feedback = _a.feedback, feedbackInvalid = _a.feedbackInvalid, feedbackValid = _a.feedbackValid, floatingLabel = _a.floatingLabel, tooltipFeedback = _a.tooltipFeedback, hitArea = _a.hitArea, id = _a.id, indeterminate = _a.indeterminate, inline = _a.inline, invalid = _a.invalid, label = _a.label, _c = _a.type, type = _c === void 0 ? 'checkbox' : _c, valid = _a.valid, rest = __rest(_a, ["className", "button", "feedback", "feedbackInvalid", "feedbackValid", "floatingLabel", "tooltipFeedback", "hitArea", "id", "indeterminate", "inline", "invalid", "label", "type", "valid"]);
    var inputRef = useRef(null);
    var forkedRef = useForkedRef(ref, inputRef);
    useEffect(function () {
        if (inputRef.current && indeterminate) {
            inputRef.current.indeterminate = indeterminate;
        }
    }, [indeterminate]);
    var _className = classNames('form-check', {
        'form-check-inline': inline,
        'is-invalid': invalid,
        'is-valid': valid,
    }, className);
    var inputClassName = classNames(button ? 'btn-check' : 'form-check-input', {
        'is-invalid': invalid,
        'is-valid': valid,
        'me-2': hitArea,
    });
    var labelClassName = classNames(button
        ? classNames('btn', button.variant ? "btn-".concat(button.variant, "-").concat(button.color) : "btn-".concat(button.color), (_b = {},
            _b["btn-".concat(button.size)] = button.size,
            _b), "".concat(button.shape))
        : 'form-check-label');
    var formControl = function () {
        return React__default.createElement("input", __assign({ type: type, className: inputClassName, id: id }, rest, { ref: forkedRef }));
    };
    var formValidation = function () { return (React__default.createElement(CFormControlValidation, { describedby: rest['aria-describedby'], feedback: feedback, feedbackInvalid: feedbackInvalid, feedbackValid: feedbackValid, floatingLabel: floatingLabel, invalid: invalid, tooltipFeedback: tooltipFeedback, valid: valid })); };
    var formLabel = function () {
        return (React__default.createElement(CFormLabel, __assign({ customClassName: labelClassName }, (id && { htmlFor: id })), label));
    };
    return button ? (React__default.createElement(React__default.Fragment, null,
        formControl(),
        label && formLabel(),
        formValidation())) : label ? (hitArea ? (React__default.createElement(React__default.Fragment, null,
        React__default.createElement(CFormLabel, __assign({ customClassName: className }, (id && { htmlFor: id })),
            formControl(),
            label),
        formValidation())) : (React__default.createElement("div", { className: _className },
        formControl(),
        formLabel(),
        formValidation()))) : (formControl());
});
CFormCheck.propTypes = __assign({ button: propTypesExports.object, className: propTypesExports.string, hitArea: propTypesExports.oneOf(['full']), id: propTypesExports.string, indeterminate: propTypesExports.bool, inline: propTypesExports.bool, label: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.node]), type: propTypesExports.oneOf(['checkbox', 'radio']) }, CFormControlValidation.propTypes);
CFormCheck.displayName = 'CFormCheck';

export { CFormCheck };
//# sourceMappingURL=CFormCheck.js.map
